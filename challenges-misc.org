#+AUTHOR: Benn Ma
#+EMAIL: benn.msg@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not LOGBOOK) date:t e:t
#+OPTIONS: email:nil f:t inline:t p:nil pri:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t toc:t todo:t |:t
#+PROPERTY: header-args  :results output

* Talbe of Content                                                       :TOC:
- [[#challenges-of-misc][Challenges of Misc]]
  - [[#how-scope-changes-after-source-another-file][how scope changes after source another file?]]
  - [[#difference-between--and-----and--------][Difference between $() and ` `, ${}, $[] and $(()), [ ] (( )) [\[  \]]]]

* Challenges of Misc
** how scope changes after source another file?
- test1.sh
#+BEGIN_SRC sh
#!/bin/sh
va="va"
export vb="vb"
#+END_SRC

- test2.sh
#+BEGIN_SRC sh
#!/bin/sh
. ~/test1.sh
echo "in test2, va:$va"
echo "in test2, vb:$vb"
ta="ta"
export tb="tb"
#+END_SRC

- execution file
#+BEGIN_SRC sh :exports both
. ~/test2.sh
echo "va: $va"
echo "vb: $vb"
echo "ta: $ta"
echo "tb: $tb"
#+END_SRC

#+RESULTS:
: in test2, va:va
: in test2, vb:vb
: va: va
: vb: vb
: ta: ta
: tb: tb

** Difference between $() and ` `, ${}, $[] and $(()), [ ] (( )) [\[  \]]
*** $() vs ``
they are both using for command substitution

- `` is more compatible, but can not be used in double quotes.
- $() is not compitibility for all shells.

#+BEGIN_SRC sh
echo $(uname -r)
echo `uname -r`
echo "uname -r: $(uname -r)"
#+END_SRC

#+RESULTS:
: 17.4.0
: 17.4.0
: uname -r: 17.4.0

*** ${}

- no difference between $var and ${var}

#+BEGIN_SRC sh
A='X'
echo $AB
echo ${A}B
#+END_SRC

#+RESULTS:
: 
: XB

- there are other usage of ${}
